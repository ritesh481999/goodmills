<?php

namespace App\Http\Controllers\Auth;

use DB;
use Mail;
use Validator;
use Carbon\Carbon;
use App\Models\User;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Mail\forgetPasswordEmail;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Foundation\Auth\SendsPasswordResetEmails;
use App\Http\Requests\ForgetPassword\ForgetPasswordRequest;
use App\Jobs\forgetPasswordJob;

class ForgotPasswordController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Password Reset Controller
    |--------------------------------------------------------------------------
    |
    | This controller is responsible for handling password reset emails and
    | includes a trait which assists in sending these notifications from
    | your application to your users. Feel free to explore this trait.
    |
    */

    use SendsPasswordResetEmails;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }
    public function showForgetPasswordForm()
    {
        return view('admin.auth.passwords.email');
    }


    public function submitForgetPasswordForm(Request $request)
      {     
         
      //  return $request->all();
        $rules = array(
            'email' => 'required|email|exists:users'
        );
        $errors = Validator::make($request->all(), $rules);
<<<<<<< Updated upstream
        if ($errors->fails()) {
              return response()->json([ 'status' => false,
                                        'errors' => $errors->errors()->all()],400);
         =======
      if ($errors->fails()) {
            return response()->json(['errors' => $errors->errors()->all()]);
        }
>>>>>>> Stashed changes
          $email_id = $request->email;
          $user = User::whereEmail($email_id)->admin()->active()->first();
         if($user)
          {
            
            $otp = rand(1000,9999);
            $otp_generated_at =date('Y-m-d H:i:s');
            DB::table('password_resets')->insert([
                'email' => $email_id, 
                'token' => Str::random(60),
                'otp' => $otp,
                'generate_at' => $otp_generated_at,
                'created_at' => Carbon::now()
              ]);
              Mail::to($user->email)->send(new forgetPasswordEmail($user,$otp));
              //dispatch(new forgetPasswordJob( $user,$otp));
<<<<<<< Updated upstream
            Mail::to($user->email)->send(new forgetPasswordEmail($user,$otp));
=======
>>>>>>> Stashed changes
            // retry(5, function () use ($user,$otp) {
            //       Mail::to($user->email)->send(new forgetPasswordEmail($user,$otp));
            //   }, 100);
              if (Mail::failures()) {
                 return response()->json(['errors'=> 'Mail is not working']);
              }
          }
              // dd("working");
        //   return back()->with('success', 'We have e-mailed your OTP');
<<<<<<< Updated upstream
          return response()->json(['status'=>true,'success'=>'OTP has been sent to Your Mail Id.']);
=======
        return response()->json(['success'=>'OTP has been sent to Your Mail Id.','status'=>true]);
>>>>>>> Stashed changes
        //return redirect()->route('auth.reset.password')->with('success','OTP has been sent to Your Mail Id.');
      }


      public function verifyOtp(Request $request)
      {
          $otp = $request->otp;

          $otpData = DB::table('password_resets')
                        ->where('otp', trim($otp))
                        ->first();
      if(!empty($otpData)){
        $current_time = date('Y-m-d H:i:s');
        $end = Carbon::parse($current_time);
        $otp_generated_at = $otpData->generate_at;
        $start = Carbon::parse($otp_generated_at);
        $calculate_time = $end->diffInSeconds($start);
        if(($calculate_time) > 120)
        {
        return redirect()->back()->with(['error' => 'Otp Expired']);
        }
        else
        {
        return redirect()->route('auth.reset.password',['token' => $otpData->token])->with('success','Otp verified');
        }

        }
        else
        {

            return redirect()->back()->with(['error' => 'Otp Doesnt Exist']);

        }
    }
}
